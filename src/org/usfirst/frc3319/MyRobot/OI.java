// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3319.MyRobot;

import org.usfirst.frc3319.MyRobot.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joydriveStick button which is any button on a joydriveStick.
    // You create one by telling it which joydriveStick it's on and which button
    // number it is.
    // JoydriveStick driveStick = new JoydriveStick(port);
    // Button button = new JoydriveStickButton(driveStick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    public Joystick driveStick;
    public Joystick otherStick;
	public JoystickButton gripperClose;
	public JoystickButton gripperOpen;
	public JoystickButton gripperRaise;
	public JoystickButton gripperLower;
	public JoystickButton engageHook;
	public JoystickButton engageWinch;
	public JoystickButton disengageHook;
	public JoystickButton disengageWinch;
	public JoystickButton stopElevator;

		
	//heights are negative because the up is negative on the elevator
	public static final double SWITCH_HEIGHT = -4763;
	public static final double SCALE_HEIGHT = -16275;
	public static final double DEFAULT_HEIGHT = -1500;

    public OI() {
    	
    	/**
    	 *  1s: 25 in
			2s: 63 in
			3s: 106 in
			4s: 142 in

    	 * 
    	 * /
    	
    	/*
    	 * Gripper Controls:
    	 * 		X:				Lower
    	 * 		Y:				Raise
    	 * 		LB:				Release
    	 * 		RB:				Grab
    	 * Elevator Controls:
    	 * 		POV Up:			Go to next setPoint up
    	 * 		POV Down:		Go to next setPoint down
    	 * 		Right driveStick:	Up/Down manually
    	 * 		Start:			Abort Movement
    	 * DriveTrain Controls:
    	 * 		Left driveStick:		Forward/Backward/Left/Right
    	 * 		LT:				Turn Left
    	 * 		RT:				Turn Right
    	 * Climber Controls:
    	 * 		A:				Engage Winch
    	 * 		B:				Disengage Winch
    	 *      Y: Engage Hook
    	 *      X: Disengage Hook
    	 */

        driveStick = new Joystick(0);
        otherStick = new Joystick(1);
		gripperClose = new JoystickButton(otherStick, 3);
		gripperOpen = new JoystickButton(otherStick, 4);
		gripperRaise = new JoystickButton(otherStick, 5);
		gripperLower = new JoystickButton(otherStick, 6);
		stopElevator = new JoystickButton(otherStick, 8);//Start Button
		
		engageWinch = new JoystickButton(driveStick, 2);//A
		disengageWinch = new JoystickButton(driveStick, 1); //B
		disengageHook = new JoystickButton(driveStick, 3);
		engageHook = new JoystickButton(driveStick, 4);
		

		
		
		gripperClose.whenPressed(new CloseGripper());
		gripperOpen.whenPressed(new OpenGripper());
		gripperRaise.whenPressed(new RaiseGripper());
		gripperLower.whenPressed(new LowerGripper());
		engageHook.whileHeld(new EngageHook());
		disengageHook.whileHeld(new DisengageHook());
		disengageWinch.whileHeld(new DisengageWinch());
		engageWinch.whileHeld(new EngageWinch());
		stopElevator.whenPressed(new DisableElevator());
		

        // SmartDashboard Buttons
		SmartDashboard.putData("CloseGripper", new CloseGripper());
		SmartDashboard.putData("OpenGripper", new OpenGripper());
		SmartDashboard.putData("RaiseGripper", new RaiseGripper());
		SmartDashboard.putData("LowerGripper", new LowerGripper());
		SmartDashboard.putData("ZeroEncoders", new ZeroEncoders());
		SmartDashboard.putData("RaiseSwitchHeight", new SetElevatorSetpoint(SWITCH_HEIGHT));
		SmartDashboard.putData("RaiseScaleHeight", new SetElevatorSetpoint(SCALE_HEIGHT));
		SmartDashboard.putData("LowerToDefaultHeight", new SetElevatorSetpoint(DEFAULT_HEIGHT));
		SmartDashboard.putData("TurnRight90", new TurnAngle(90, 5));
		SmartDashboard.putData("TurnLeft90", new TurnAngle(-90,5));
		SmartDashboard.putData("ZeroGyro", new ZeroGyro());
		SmartDashboard.putData("SetFrontUltrasonic", new SetUltrasonicSensor(true));
		SmartDashboard.putData("SetBackUltrasonic", new SetUltrasonicSensor(false));
		SmartDashboard.putData("Drive To 24 Inches", new DriveToInches(24, 5, false));
		SmartDashboard.putData("Drive 10 Inches", new DriveInches(10, 5, false));
		
		SmartDashboard.putData("Drive 1 Seconds", new DriveByTime(1));
		SmartDashboard.putData("Drive 2 Seconds", new DriveByTime(2));
		SmartDashboard.putData("Drive 3 Seconds", new DriveByTime(3));
		SmartDashboard.putData("Drive 4 Seconds", new DriveByTime(4));
		SmartDashboard.putData("Drive 5 Seconds", new DriveByTime(5));


		
		SmartDashboard.putNumber("Drive Proportional", 0.4);
		SmartDashboard.putNumber("Drive Integral", 0.0);
		SmartDashboard.putNumber("Drive Differential", 0.75);
		
		
		SmartDashboard.putBoolean("Compressor On", true);
		SmartDashboard.putNumber("Speed Step Drive Train", Robot.DriveTrain.defaultStep);
		
		SmartDashboard.putNumber("Elevator Speed", 0);
		
    }
    
    public double getXValue() {
    	return driveStick.getX();
    }
    
    public double getYValue() {
    	return driveStick.getY();
    }
    
    public double getElevatorPower() {
    	return otherStick.getRawAxis(1);
    }
    
    public double getRotationLeft() {
    	return driveStick.getRawAxis(2);
    }
    
    public double getRotationRight() {
    	return driveStick.getRawAxis(3);
    }
    
    public int getPOV() {
    	return otherStick.getPOV();
    }
    

}

