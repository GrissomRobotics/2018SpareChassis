// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3319.MyRobot;

import org.usfirst.frc3319.MyRobot.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joydriveStick button which is any button on a joydriveStick.
    // You create one by telling it which joydriveStick it's on and which button
    // number it is.
    // JoydriveStick driveStick = new JoydriveStick(port);
    // Button button = new JoydriveStickButton(driveStick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    public Joystick driveStick;
    public OI() {

        driveStick = new Joystick(0);

		
		SmartDashboard.putData("TurnRight90", new TurnAngle(90, 5));
		SmartDashboard.putData("TurnLeft90", new TurnAngle(-90,5));
		SmartDashboard.putData("ZeroGyro", new ZeroGyro());

		SmartDashboard.putNumber("Speed Step Drive Train", Robot.DriveTrain.defaultStep);
		
    }
    
    public double getXValue() {
    	return driveStick.getX();
    }
    
    public double getYValue() {
    	return driveStick.getY();
    }
    
    public double getRotationLeft() {
    	return driveStick.getRawAxis(2);
    }
    
    public double getRotationRight() {
    	return driveStick.getRawAxis(3);
    }

}

