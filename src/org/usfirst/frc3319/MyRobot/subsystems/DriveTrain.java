// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3319.MyRobot.subsystems;
import java.util.Arrays;

import org.usfirst.frc3319.MyRobot.Robot;
import org.usfirst.frc3319.MyRobot.RobotMap;
import org.usfirst.frc3319.MyRobot.commands.*;
import com.github.cliftonlabs.json_simple.JsonKey;
import com.github.cliftonlabs.json_simple.JsonObject;
import com.github.cliftonlabs.json_simple.Jsoner;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.ADXRS450_Gyro;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.DigitalOutput;
import edu.wpi.first.wpilibj.I2C;
import edu.wpi.first.wpilibj.SerialPort.Port;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.SerialPort;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Ultrasonic;
import edu.wpi.first.wpilibj.drive.MecanumDrive;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import java.util.regex.*;

/**
 *
 */
public class DriveTrain extends Subsystem{
	private final SpeedController leftFront = RobotMap.driveTrainLeftFront;
    private final SpeedController rightFront = RobotMap.driveTrainRightFront;
    private final SpeedController leftRear = RobotMap.driveTrainLeftRear;
    private final SpeedController rightRear = RobotMap.driveTrainRightRear;
    protected final MecanumDrive mecanumDrive = RobotMap.driveTrainMecanumDrive;
    private final ADXRS450_Gyro  gyro = RobotMap.gyro;
    protected final PIDController gyroController = RobotMap.gyroController;
	public double defaultStep = 0.03;
	double maxPowerPID = 0.4;
	double maxPowerGyroPID = 0.4;
	private int gyroTolerance = 2;
	public double startTime;
	public double currentTime;
	public int maxTime = 5000;
	


    @Override
    public void initDefaultCommand() {
        setDefaultCommand(new DriveWithJoystick());
        gyroController.setContinuous(false);
    	gyroController.setOutputRange(-maxPowerGyroPID, maxPowerGyroPID); //Set turning speed output to be not more than 40% power
    	gyroController.setAbsoluteTolerance(gyroTolerance); //Set tolerance on the gyro PID for 2 degrees
    	gyroController.disable();
    }
    
    @Override
    public void periodic() {

    	SmartDashboard.putNumber("Robot Heading value", getGyroValue());
    	SmartDashboard.putNumber("Gyro PID power", gyroController.get());
    }
    
    public void cartesianDrive(double xValue, double yValue, double rotationValue) {
    	//Negate xValue to resolve strafing direction issue
    	mecanumDrive.driveCartesian(-xValue, yValue, rotationValue);
    }
    
    public void stop() {
    	leftFront.stopMotor();
    	rightFront.stopMotor();
    	leftRear.stopMotor();
    	rightRear.stopMotor();
    	resetGyro();

    }
    
    public double getGyroValue() {
    	return gyro.getAngle();
    }
    
    public void resetGyro() {
    	gyro.reset();
    }
    
    public void calibrateGyro() {
    	gyro.calibrate();
    }
	
	public void setGyroSetpoint(double setpoint) {
		gyroController.setSetpoint(setpoint);
	}
	
	public double getGyroSetpoint() {
		return gyroController.getSetpoint();
	}
	
	//Only use for the purpose of turning with the gyro
	//This will not do anything for any other drive train purpose
	public void enableGyroController() {
		gyroController.enable();
	}
	
	public void disableGyroController() {
		gyroController.disable();
	}
	
	public boolean isGyroControllerOnTarget() {
		return gyroController.onTarget();
	}
	
	public void setGyroPID(double p, double i, double d) {
		gyroController.setPID(p, i, d);
	}
}

