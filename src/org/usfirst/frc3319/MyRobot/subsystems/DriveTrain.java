// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3319.MyRobot.subsystems;

import org.usfirst.frc3319.MyRobot.Robot;
import org.usfirst.frc3319.MyRobot.RobotMap;
import org.usfirst.frc3319.MyRobot.commands.*;
import org.usfirst.frc3319.custom.ADIS16448_IMU;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.ADXRS450_Gyro;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.SerialPort;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Ultrasonic;
import edu.wpi.first.wpilibj.drive.MecanumDrive;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class DriveTrain extends Subsystem {

    private final SpeedController leftFront = RobotMap.driveTrainLeftFront;
    private final SpeedController rightFront = RobotMap.driveTrainRightFront;
    private final SpeedController leftRear = RobotMap.driveTrainLeftRear;
    private final SpeedController rightRear = RobotMap.driveTrainRightRear;
    private final MecanumDrive mecanumDrive = RobotMap.driveTrainMecanumDrive;
    private final Ultrasonic ultraSonic = RobotMap.ultraSonic;
    private final ADIS16448_IMU  gyro = RobotMap.gyro;


    @Override
    public void initDefaultCommand() {
        setDefaultCommand(new DriveWithJoystick());

    }

    @Override
    public void periodic() {
    	SmartDashboard.putNumber("Gyro Reading", getGyroValue());
    	
    }
    
    public void cartesianDrive(double xValue, double yValue, double rotationValue, double gyroCorrection) {
    	//Negate xValue to resolve strafing direction issue
    	mecanumDrive.driveCartesian(-xValue, yValue, rotationValue, gyroCorrection);
    }
    
    public void stop() {
    	leftFront.stopMotor();
    	rightFront.stopMotor();
    	leftRear.stopMotor();
    	rightRear.stopMotor();

    }
    
    public double getUltraSonicInches() {
    	return ultraSonic.getRangeInches();
    }
    
    public double getGyroValue() {
    	return gyro.getAngle();
    }
}

