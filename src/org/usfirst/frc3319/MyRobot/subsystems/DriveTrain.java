// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3319.MyRobot.subsystems;

import org.usfirst.frc3319.MyRobot.Robot;
import org.usfirst.frc3319.MyRobot.RobotMap;
import org.usfirst.frc3319.MyRobot.commands.*;
import org.usfirst.frc3319.custom.ADIS16448_IMU;
import org.usfirst.frc3319.custom.Adis;

import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.ADXRS450_Gyro;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.SerialPort;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Ultrasonic;
import edu.wpi.first.wpilibj.drive.MecanumDrive;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class DriveTrain extends PIDSubsystem {
	private final SpeedController leftFront = RobotMap.driveTrainLeftFront;
    private final SpeedController rightFront = RobotMap.driveTrainRightFront;
    private final SpeedController leftRear = RobotMap.driveTrainLeftRear;
    private final SpeedController rightRear = RobotMap.driveTrainRightRear;
    private final MecanumDrive mecanumDrive = RobotMap.driveTrainMecanumDrive;
    private final Ultrasonic ultraSonic = RobotMap.ultraSonic;
    private final Adis  gyro = RobotMap.gyro;
    private final PIDController gyroController = RobotMap.gyroController;
    
	public double defaultStep = 0.025;
    
	public DriveTrain() {
		super("Elevator", 0.5,0.0,2.0);
		setAbsoluteTolerance(0.1); //Set 0.1 inches as the tolerance for purposes of driving
    	getPIDController().setContinuous(false);
    	setOutputRange(-1.0, 1.0);
    	
    	gyroController.setContinuous(false);
    	gyroController.setOutputRange(-0.4, 0.4);//Set turning speed output to be not more than 40% power
    	gyroController.setAbsoluteTolerance(2); //Set tolerance on the gyro PID for 2 degrees
    	

	}


    @Override
    public void initDefaultCommand() {
        setDefaultCommand(new DriveWithJoystick());

    }

    @Override
    public void periodic() {
    	SmartDashboard.putNumber("Robot Heading value", getGyroValue());
    	SmartDashboard.putNumber("Gyro PID power", gyroController.get());
    	
    }
    
    public void cartesianDrive(double xValue, double yValue, double rotationValue) {
    	//Negate xValue to resolve strafing direction issue
    	mecanumDrive.driveCartesian(-xValue, yValue, rotationValue);
    }
    
    public void stop() {
    	leftFront.stopMotor();
    	rightFront.stopMotor();
    	leftRear.stopMotor();
    	rightRear.stopMotor();

    }
    
    public double getUltraSonicInches() {
    	return ultraSonic.getRangeInches();
    }
    
    public double getGyroValue() {
    	return gyro.getRobotHeading();
    }
    
    public void resetGyro() {
    	gyro.reset();
    }
    
    public void calibrateGyro() {
    	gyro.calibrate();
    }

	@Override
	protected double returnPIDInput() {
		return getUltraSonicInches();
	}

	@Override
	protected void usePIDOutput(double output) {
		//Negate output because going forward will decrease the ultraSonic reading
		mecanumDrive.driveCartesian(0, -output, gyroController.get());
	}
	
	public void setGyroSetpoint(double setpoint) {
		gyroController.setSetpoint(setpoint);
	}
	
	//Only use for the purpose of turning with the gyro
	//This will not do anything for any other drive train purpose
	public void enableGyroController() {
		gyroController.enable();
	}
	
	public void disableGyroController() {
		gyroController.disable();
	}
	
	public boolean isGyroControllerOnTarget() {
		return gyroController.onTarget();
	}
	
	public void setGyroPID(double p, double i, double d) {
		gyroController.setPID(p, i, d);
	}
}

